plugins {
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow"
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$KOTLIN_VERSION"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$KOTLIN_VERSION"

    compileOnly "io.arrow-kt:arrow-core:$ARROW_VERSION"
    compileOnly "io.arrow-kt:compiler-plugin:$ARROW_META_VERSION"
    compileOnly "io.arrow-kt:arrow-meta-prelude:$ARROW_META_VERSION"

    compileOnly project(":hooks")
    testRuntimeOnly project(":hooks")
    testImplementation "io.arrow-kt:arrow-meta-prelude:$ARROW_META_VERSION"
    testImplementation "io.arrow-kt:arrow-core:$ARROW_VERSION"
    testImplementation("io.arrow-kt:compiler-plugin:$ARROW_META_VERSION")
    testImplementation("io.arrow-kt:meta-test:$ARROW_META_VERSION")
    testImplementation(platform("org.junit:junit-bom:5.7.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "$JVM_TARGET_VERSION"
    }
}

// Create a new JAR with: Arrow Meta + new plugin
shadowJar {
    configurations = [project.configurations.compileOnly]
    dependencies {
        exclude("org.jetbrains.kotlin:kotlin-stdlib",
                "org.jetbrains.kotlin:kotlin-compiler-embeddable")
    }
}
